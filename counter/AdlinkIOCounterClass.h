//=============================================================================
//
// file :         AdlinkIOCounterClass.h
//
// description :  Include for the AdlinkIOCounterClass root class.
//                This class is represents the singleton class for
//                the AdlinkIOCounter device class.
//                It contains all properties and methods which the 
//                AdlinkIOCounter requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _ADLINKIOCOUNTERCLASS_H
#define _ADLINKIOCOUNTERCLASS_H

#include <tango.h>
#include <AdlinkIOCounter.h>


namespace AdlinkIOCounter_ns
{//=====================================
//	Define classes for attributes
//=====================================
class PulseWidthAttrib: public Tango::Attr
{
public:
	PulseWidthAttrib():Attr("PulseWidth", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~PulseWidthAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_PulseWidth(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_PulseWidth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_PulseWidth_allowed(ty);}
};

class PulseDelayAttrib: public Tango::Attr
{
public:
	PulseDelayAttrib():Attr("PulseDelay", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~PulseDelayAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_PulseDelay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_PulseDelay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_PulseDelay_allowed(ty);}
};

class InitialCountAttrib: public Tango::Attr
{
public:
	InitialCountAttrib():Attr("InitialCount", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~InitialCountAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_InitialCount(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_InitialCount(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_InitialCount_allowed(ty);}
};

class PolarityLowOutputAttrib: public Tango::Attr
{
public:
	PolarityLowOutputAttrib():Attr("PolarityLowOutput", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PolarityLowOutputAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_PolarityLowOutput(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_PolarityLowOutput(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_PolarityLowOutput_allowed(ty);}
};

class PolarityLowClockEnAttrib: public Tango::Attr
{
public:
	PolarityLowClockEnAttrib():Attr("PolarityLowClockEn", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PolarityLowClockEnAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_PolarityLowClockEn(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_PolarityLowClockEn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_PolarityLowClockEn_allowed(ty);}
};

class PolarityLowUpDownAttrib: public Tango::Attr
{
public:
	PolarityLowUpDownAttrib():Attr("PolarityLowUpDown", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PolarityLowUpDownAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_PolarityLowUpDown(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_PolarityLowUpDown(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_PolarityLowUpDown_allowed(ty);}
};

class PolarityLowGateAttrib: public Tango::Attr
{
public:
	PolarityLowGateAttrib():Attr("PolarityLowGate", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~PolarityLowGateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_PolarityLowGate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_PolarityLowGate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_PolarityLowGate_allowed(ty);}
};

class SourceUpDownAttrib: public Tango::Attr
{
public:
	SourceUpDownAttrib():Attr("SourceUpDown", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~SourceUpDownAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_SourceUpDown(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_SourceUpDown(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_SourceUpDown_allowed(ty);}
};

class SourceGateAttrib: public Tango::Attr
{
public:
	SourceGateAttrib():Attr("SourceGate", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~SourceGateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_SourceGate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_SourceGate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_SourceGate_allowed(ty);}
};

class SourceTimeBaseAttrib: public Tango::Attr
{
public:
	SourceTimeBaseAttrib():Attr("SourceTimeBase", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~SourceTimeBaseAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_SourceTimeBase(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_SourceTimeBase(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_SourceTimeBase_allowed(ty);}
};

class ModeAttrib: public Tango::Attr
{
public:
	ModeAttrib():Attr("Mode", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_Mode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_Mode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_Mode_allowed(ty);}
};

class SoftwareControlUpDownAttrib: public Tango::Attr
{
public:
	SoftwareControlUpDownAttrib():Attr("SoftwareControlUpDown", Tango::DEV_SHORT, Tango::WRITE) {};
	~SoftwareControlUpDownAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_SoftwareControlUpDown(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_SoftwareControlUpDown(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_SoftwareControlUpDown_allowed(ty);}
};

class SoftwareControlGateAttrib: public Tango::Attr
{
public:
	SoftwareControlGateAttrib():Attr("SoftwareControlGate", Tango::DEV_SHORT, Tango::WRITE) {};
	~SoftwareControlGateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_SoftwareControlGate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->write_SoftwareControlGate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_SoftwareControlGate_allowed(ty);}
};

class StatusRegisterAttrib: public Tango::Attr
{
public:
	StatusRegisterAttrib():Attr("StatusRegister", Tango::DEV_SHORT, Tango::READ) {};
	~StatusRegisterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_StatusRegister(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_StatusRegister_allowed(ty);}
};

class ValueAttrib: public Tango::Attr
{
public:
	ValueAttrib():Attr("Value", Tango::DEV_ULONG, Tango::READ) {};
	~ValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkIOCounter *>(dev))->read_Value(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_Value_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_Start_allowed(any);}
};



class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AdlinkIOCounter *>(dev))->is_Reset_allowed(any);}
};



//
// The AdlinkIOCounterClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	AdlinkIOCounterClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AdlinkIOCounterClass *init(const char *);
	static AdlinkIOCounterClass *instance();
	~AdlinkIOCounterClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AdlinkIOCounterClass(string &);
	static AdlinkIOCounterClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace AdlinkIOCounter_ns

#endif // _ADLINKIOCOUNTERCLASS_H
