//=============================================================================
//
// file :        AdlinkIOCounter.h
//
// description : Include for the AdlinkIOCounter class.
//
// project :	Counter class for AdlinkIODS devices
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _ADLINKIOCOUNTER_H
#define _ADLINKIOCOUNTER_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------

namespace AdlDeviceFactorySingleton_ {
struct AdlBoardParams;
};
class CounterDeviceInterface;
class DevicePartInterface;

namespace AdlinkIOCounter_ns
{

/**
 * Class Description:
 * Some AdlinkIODS analog Input/Output devices also have counter support.
 *	This class is to access this functionality.
 *	One instance is required for each counter in the board.
 */

/*
 *	Device States Description:
*  Tango::STANDBY :  The device is ready to be used. It is now configurable.
*  Tango::RUNNING :  The device is counting.
*  Tango::FAULT :    The device could not be found or it is damaged.
 */


class AdlinkIOCounter: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevULong	*attr_Value_read;
		Tango::DevShort	*attr_StatusRegister_read;
		Tango::DevShort	attr_SoftwareControlGate_write;
		Tango::DevShort	attr_SoftwareControlUpDown_write;
		Tango::DevLong	*attr_Mode_read;
		Tango::DevLong	attr_Mode_write;
		Tango::DevShort	*attr_SourceTimeBase_read;
		Tango::DevShort	attr_SourceTimeBase_write;
		Tango::DevShort	*attr_SourceGate_read;
		Tango::DevShort	attr_SourceGate_write;
		Tango::DevShort	*attr_SourceUpDown_read;
		Tango::DevShort	attr_SourceUpDown_write;
		Tango::DevBoolean	*attr_PolarityLowGate_read;
		Tango::DevBoolean	attr_PolarityLowGate_write;
		Tango::DevBoolean	*attr_PolarityLowUpDown_read;
		Tango::DevBoolean	attr_PolarityLowUpDown_write;
		Tango::DevBoolean	*attr_PolarityLowClockEn_read;
		Tango::DevBoolean	attr_PolarityLowClockEn_write;
		Tango::DevBoolean	*attr_PolarityLowOutput_read;
		Tango::DevBoolean	attr_PolarityLowOutput_write;
		Tango::DevUShort	*attr_InitialCount_read;
		Tango::DevUShort	attr_InitialCount_write;
		Tango::DevUShort	*attr_PulseDelay_read;
		Tango::DevUShort	attr_PulseDelay_write;
		Tango::DevUShort	*attr_PulseWidth_read;
		Tango::DevUShort	attr_PulseWidth_write;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	Product descriptor that allow us to identify the card type. Supported values are: DAQ_2205, DAQ_2502, DAQ_2005, DAQ_2010.
 */
	string	boardType;
/**
 *	It must be an unique identifier for each card on the PC/Rack where it is installed. It is the Board Number in the Rack. So if there are two cards of the same BoardType in the rack, the first will have BoardId=0 and the other BoardId=1.
 */
	string	boardID;
/**
 *	It's 0 or 1
 */
	Tango::DevLong	counterID;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AdlinkIOCounter(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AdlinkIOCounter(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	AdlinkIOCounter(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~AdlinkIOCounter() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name AdlinkIOCounter methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for Value acquisition result.
 */
	virtual void read_Value(Tango::Attribute &attr);
/**
 *	Extract real attribute values for StatusRegister acquisition result.
 */
	virtual void read_StatusRegister(Tango::Attribute &attr);
/**
 *	Extract real attribute values for SoftwareControlGate acquisition result.
 */
	virtual void read_SoftwareControlGate(Tango::Attribute &attr);
/**
 *	Write SoftwareControlGate attribute values to hardware.
 */
	virtual void write_SoftwareControlGate(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for SoftwareControlUpDown acquisition result.
 */
	virtual void read_SoftwareControlUpDown(Tango::Attribute &attr);
/**
 *	Write SoftwareControlUpDown attribute values to hardware.
 */
	virtual void write_SoftwareControlUpDown(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Mode acquisition result.
 */
	virtual void read_Mode(Tango::Attribute &attr);
/**
 *	Write Mode attribute values to hardware.
 */
	virtual void write_Mode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for SourceTimeBase acquisition result.
 */
	virtual void read_SourceTimeBase(Tango::Attribute &attr);
/**
 *	Write SourceTimeBase attribute values to hardware.
 */
	virtual void write_SourceTimeBase(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for SourceGate acquisition result.
 */
	virtual void read_SourceGate(Tango::Attribute &attr);
/**
 *	Write SourceGate attribute values to hardware.
 */
	virtual void write_SourceGate(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for SourceUpDown acquisition result.
 */
	virtual void read_SourceUpDown(Tango::Attribute &attr);
/**
 *	Write SourceUpDown attribute values to hardware.
 */
	virtual void write_SourceUpDown(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PolarityLowGate acquisition result.
 */
	virtual void read_PolarityLowGate(Tango::Attribute &attr);
/**
 *	Write PolarityLowGate attribute values to hardware.
 */
	virtual void write_PolarityLowGate(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PolarityLowUpDown acquisition result.
 */
	virtual void read_PolarityLowUpDown(Tango::Attribute &attr);
/**
 *	Write PolarityLowUpDown attribute values to hardware.
 */
	virtual void write_PolarityLowUpDown(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PolarityLowClockEn acquisition result.
 */
	virtual void read_PolarityLowClockEn(Tango::Attribute &attr);
/**
 *	Write PolarityLowClockEn attribute values to hardware.
 */
	virtual void write_PolarityLowClockEn(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PolarityLowOutput acquisition result.
 */
	virtual void read_PolarityLowOutput(Tango::Attribute &attr);
/**
 *	Write PolarityLowOutput attribute values to hardware.
 */
	virtual void write_PolarityLowOutput(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for InitialCount acquisition result.
 */
	virtual void read_InitialCount(Tango::Attribute &attr);
/**
 *	Write InitialCount attribute values to hardware.
 */
	virtual void write_InitialCount(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PulseDelay acquisition result.
 */
	virtual void read_PulseDelay(Tango::Attribute &attr);
/**
 *	Write PulseDelay attribute values to hardware.
 */
	virtual void write_PulseDelay(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PulseWidth acquisition result.
 */
	virtual void read_PulseWidth(Tango::Attribute &attr);
/**
 *	Write PulseWidth attribute values to hardware.
 */
	virtual void write_PulseWidth(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for Value attribute.
 */
	virtual bool is_Value_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for StatusRegister attribute.
 */
	virtual bool is_StatusRegister_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SoftwareControlGate attribute.
 */
	virtual bool is_SoftwareControlGate_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SoftwareControlUpDown attribute.
 */
	virtual bool is_SoftwareControlUpDown_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Mode attribute.
 */
	virtual bool is_Mode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SourceTimeBase attribute.
 */
	virtual bool is_SourceTimeBase_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SourceGate attribute.
 */
	virtual bool is_SourceGate_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SourceUpDown attribute.
 */
	virtual bool is_SourceUpDown_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PolarityLowGate attribute.
 */
	virtual bool is_PolarityLowGate_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PolarityLowUpDown attribute.
 */
	virtual bool is_PolarityLowUpDown_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PolarityLowClockEn attribute.
 */
	virtual bool is_PolarityLowClockEn_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PolarityLowOutput attribute.
 */
	virtual bool is_PolarityLowOutput_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for InitialCount attribute.
 */
	virtual bool is_InitialCount_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PulseDelay attribute.
 */
	virtual bool is_PulseDelay_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PulseWidth attribute.
 */
	virtual bool is_PulseWidth_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Reset command.
 */
	virtual bool is_Reset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 * Halts the timer/counter operation and reload the initial value of the timer/counter.
 *	@exception DevFailed
 */
	void	reset();
/**
 * Starts measurement tasks. Counter has to be configured first!
 *	@exception DevFailed
 */
	void	start();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
	int						m_cardNumber;
	DevicePartInterface*	m_device;
	const AdlDeviceFactorySingleton_::AdlBoardParams* m_boardParams;

	inline CounterDeviceInterface & device();
	inline const CounterDeviceInterface& device() const;

	Tango::DevULong	m_value;
	Tango::DevShort	m_statusRegister;
};

}	// namespace_ns

#endif	// _ADLINKIOCOUNTER_H
