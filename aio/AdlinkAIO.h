//=============================================================================
//
// file :        AdlinkAIO.h
//
// description : Include for the AdlinkAIO class.
//
// project :	Adlink Analog Input Output Device Server
//
// $Author: rsune $
//
// $Revision: 8649 $
//
//
// copyleft :   CELLS/ALBA
//		Edifici Ciences Nord
//		Campus Universitari de Bellaterra
//		Universitat Autonoma de Barcelona
//		08193 Bellaterra, Barcelona, SPAIN
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//=============================================================================
#ifndef _ADLINKIODS_H
#define _ADLINKIODS_H

#include <tango.h>
#include <AnalogDAQ.h>

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/mman.h>
#include <pthread.h>
#include <math.h>
#include "d2kdask.h"

#include "BaseBehaviour.h"
#include "StatsCalculator.h"
#include "StatsSettings.h"
#include "AdlDeviceFactorySingleton.h"

//using namespace Tango;

class ChangeEventListenerInterface;
class ChangeEventListener;

/**
 * @author	$Author: rsune $
 * @version	$Revision: 8649 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------
/** \mainpage Device Server User Guide

The Device Server user guide has its own <A HREF="default.html"><B>Index</B></A> \n
\n
Don't forget to take a look on:
					  \li <A HREF="test.html"><B>Test:</B></A>: a list with the modifications being tested. \n
					  \li <A HREF="todo.html"><B>Todo:</B></A>: a list with the missing things. \n
					  \li <A HREF="bug.html"><B>Bugs:</B></A>: a list with the known bugs. \n

@verbinclude AdlinkIODS_Notes.txt
\htmlinclude doc_html/user_guide.html 
\section Tango 
Tango is an Open source Object Oriented Control System
\section AnalogDAQ 
Analog DAQ is the Abstract Class used to specify the Analog Data Acquisition Behaviour
*/

namespace AdlinkAIO_ns
{
/** Tango Device Server for Analog Input/Outputs, using Adlink Devices.
 *
 * Class Description:
 * Tango Device Server for Analog Input/Outputs, using Adlink devices and
 *	implementing the AnalogDAQ AbstractClass.
 *	@li The start() and stop() commands will manage the process of acquisition
 *	@li The Device Server manages both Analog Inputs and Outputs.
 *	@li AdlinkAIO [DS] is an interface between Tango and the AdlinkDevice [HW] c++ object.
 *	@li The values set for properties and some attributes are used to configure the hardware device.
 *	@li rawData is the binary image (2D array) shared by [DS] and [HW] to move information between attributes and acquisition.
 *	@li Each physical channel is stored in a different line of the rawData array.
 *	@li Data attributes are dynamic, the property NumOfChannels determine the number of attributes to be created.
 *	@li DevDouble Cxx_ChannelValues is a Read/Write Spectrum for each channel, uses read/write_ChannelSpectrum()
 *	@li DevDouble Cxx_LastValue is a Read/Write Scalar for each channel, uses read/write_ScalarValue(), when reading gives the last value of the channel spectrum, when writing it overwrites all the values of the spectrum.
 *	@li RawData and DoubleData attributes allow to read the full buffer image using binary or double formats.
 *	@li Conversion between binary and voltage is HW dependant and done in the AdlinkDevice c++ object.
 *	
 *	Device States Description:
 *	@li @b Tango::STANDBY :  After Initialization or an stop() command received; this State allows the modification of all the attributes.
 *	@li @b Tango::RUNNING :  A command start() received, The Device is processing data.
 *	@li @b Tango::ON :       The device has finished the data acquisition/generation and is ready for a new start().
 *	@li @b Tango::FAULT :    An Exception from Hardware or Driver has been received. The Status command will give more information about the Error.
 *	@li @b Tango::UNKNOWN :  The Hardware has not been initialized.
 */


class AdlinkAIO: public AnalogDAQ_ns::AnalogDAQ	//	Inherited from class Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------

	/** This method allows the dynamic attributes code to read the numOfChannels property */
	unsigned short get_numOfChannels() {return numOfChannels;}

	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_LastValues_read;
		Tango::DevDouble	attr_LastValues_write;
		Tango::DevLong	*attr_SampleRate_read;
		Tango::DevLong	attr_SampleRate_write;
		Tango::DevLong	*attr_Delay_read;
		Tango::DevLong	attr_Delay_write;
		Tango::DevLong  *attr_DelaySource_read;
		Tango::DevLong  attr_DelaySource_write;
		Tango::DevLong	*attr_ChannelSamplesPerTrigger_read;
		Tango::DevLong	attr_ChannelSamplesPerTrigger_write;
		Tango::DevLong	*attr_NumOfTriggers_read;
		Tango::DevLong	attr_NumOfTriggers_write;
		Tango::DevLong	*attr_NumOfDisplayableTriggers_read;
		Tango::DevLong	attr_NumOfDisplayableTriggers_write;
		Tango::DevDouble	*attr_MaxRefSource_read;
		Tango::DevDouble	attr_MaxRefSource_write;
		Tango::DevDouble	*attr_MinRefSource_read;
		Tango::DevDouble	attr_MinRefSource_write;
		Tango::DevDouble	*attr_TriggerHighLimit_read;
		Tango::DevDouble	attr_TriggerHighLimit_write;
		Tango::DevDouble	*attr_TriggerLowLimit_read;
		Tango::DevDouble	attr_TriggerLowLimit_write;
		Tango::DevString	*attr_TriggerSources_read;
		Tango::DevString	attr_TriggerSources_write;
		Tango::DevUShort	*attr_TriggerMode_read;
		Tango::DevUShort	attr_TriggerMode_write;
		Tango::DevLong	*attr_TriggerInfinite_read;
		Tango::DevLong	attr_TriggerInfinite_write;
		Tango::DevDouble	*attr_BufferPeriod_read;
		Tango::DevDouble	attr_BufferPeriod_write;
		Tango::DevString	*attr_BufferedChannelsList_read;
		Tango::DevString	attr_BufferedChannelsList_write;
		Tango::DevLong	*attr_RawDATA_read;
		Tango::DevLong	attr_RawDATA_write;
		Tango::DevDouble	*attr_DoubleDATA_read;
		Tango::DevDouble	attr_DoubleDATA_write;
		Tango::DevString	*attr_FileName_read;
		Tango::DevString	attr_FileName_write;
		Tango::DevDouble	*attr_ScalarValue_read;
		Tango::DevDouble	attr_ScalarValue_write;
		Tango::DevDouble	*attr_ChannelSpectrum_read;
		Tango::DevDouble	attr_ChannelSpectrum_write;

		Tango::DevDouble	attr_ScalarStatistic_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	It must be an unique identifier for each card on the PC/Rack where it is installed. It is the Board Number in the Rack. So if there are two cards of the same BoardType in the rack, the first will have BoardId=0 and the other BoardId=1.
 */
	string	boardId;
/**
 *	Product descriptor that allow us to identify the card type. Supported values are: DAQ_2205, DAQ_2502, DAQ_2005, DAQ_2010, PCI_6208V, PCI_6208A, PCI9116.
 */
	string	boardType;
/**
 *	Onboard Buffer of the Physical Device.
 *	
 *	
 */
	Tango::DevULong	onBoardBuffer;
/**
 *	<b>CURRENTLY IGNORED:</b> Maximum Sample Rate (per Channel) that is capable the DAQ Card.
 *	-> The SampleRate.MaxValue Attribute Property will be fixed each time this Property is modified.
 */
	Tango::DevULong	maxSampleRate;
/**
 *	<b>CURRENTLY IGNORED:</b> Maximum Source Range allowed (Bipolar), it is understood as +/-MaxSourceRange.
 *	-> The Attributes MaxSourceRef and MinSourceRef will adapt its MaxValue and MinValue Properties to the value stored in this Property.
 */
	Tango::DevDouble	maxSourceRange;
/**
 *	<b>CURRENTLY IGNORED:</b> Number of Bits of the DAQ Converter.
 *	-> It allows to convert from RawDATA (binary obtained from the Analog to Digital converter) to DoubleDATA (float point values normalized in the SourceRange).
 */
	Tango::DevUShort	dynamicRange;
/**
 *	<b>CURRENTLY IGNORED:</b> Units concerning to the data measured/generated.
 *	-> This property will modify the units for all related Attributes.
 */
	string	units;
/**
 *	Total number of channels available in the DAQ card. This Property refers only to the Physical Channels of the same type of the Abstract Class (e.g. in an Analog Input Device it will refer only to the Analog Input Channels).
 *	-> It determines the maximum size of the Attribute BufferedChannels List and fixes the Attribute default value.
 */
	Tango::DevUShort	numOfChannels;
/**
 *	A/D input channels reference Ground Selection (only available for 
 *	DAQ-2204/2205/2206/2208/2213/2214):
 * <ul>
 *	  <li> DAQ-2010, DAQ-2005, DAQ-2006, DAQ-2501, DAQ-2502: 0</li>
 *	  <li> DAQ-2204, DAQ-2205, DAQ-2206, DAQ-2208, DAQ-2213, DAQ-2214:</li>
 *      <ul>
 * 
 *	    <li>AI_RSE : Referenced single ended mode ( 64chs common to ground
 *	           system on board) (default value)</li>
 *	    <li>AI_DIFF : Differential mode</li>
 *	    <li>AI_NRSE : Non-referenced single ended mode ( 64chs common to
 *	            AISENSE pin )</li>
 * </ul>
 */
	string	referenceGround;
/**
 *	If set to true, device will be automatically started on init.
 */
	Tango::DevBoolean	autoStart;
/**
 *	In this conditions are given:
 * <ul>
 *	  <li>It is set to true.</li>
 *	  <li>We are in a mode that can make use of callback signals.</li>
 *	  <li>The physical board supports signals for this mode.</li>
 * </ul>
 *	Then callback signals will be used, instead of a polling thread.
 *	Default value is true. Analog Input only.
 */
	Tango::DevBoolean	useCallbackSignals;
/**
 *  If it is true, it will always copy the contents of the acquisitions
 *  from driver memory to tango. If it is set to false, in some cases
 *  (It's not always possible!) the data will be copied to tango space
 *  ONLY when reading of an attribute is requested.
 *	Default value is true. Analog Input only.
 */
	Tango::DevBoolean	useSharedBuffer;
/**
 *  In Analog Input, if the value of an attribute changes the
 *  attribute will automatically push a change event.
 *  This applies only to CXX_ChannelValues attributes.
 *  Defaults to false.
 */
	Tango::DevBoolean enableChannelValueEvents;
/**
 *  In Analog Input, if the value of an attribute changes the
 *  attribute will automatically push a change event.
 *  This applies only to LastValues and CXX_LastValue attributes.
 *  Defaults to false.
 */
	Tango::DevBoolean enableLastValueEvents;


	std::vector<std::string> statsSettings;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AdlinkAIO(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AdlinkAIO(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	AdlinkAIO(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~AdlinkAIO() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name AdlinkAIO methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Read/Write allowed for BufferedChannelsList attribute.
 */
	virtual bool is_LastValues_allowed(Tango::AttReqType type);
/**
 *	Extract real attribute values for LastValues acquisition result.
 */
	virtual void read_LastValues(Tango::Attribute &attr);
/**
 *	Write LastValues attribute values to hardware.
 */
	virtual void write_LastValues(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Delay acquisition result.
 */
	virtual void read_Delay(Tango::Attribute &attr);
/**
 *	Write Delay attribute values to hardware.
 */
	virtual void write_Delay(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for DelaySource acquisition result.
 */
	virtual void read_DelaySource(Tango::Attribute &attr);
/**
 *	Write DelaySource attribute values to hardware.
 */
	virtual void write_DelaySource(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for SampleRate acquisition result.
 */
	virtual void read_SampleRate(Tango::Attribute &attr);
/**
 *	Write SampleRate attribute values to hardware.
 */
	virtual void write_SampleRate(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for ChannelSamplesPerTrigger acquisition result.
 */
	virtual void read_ChannelSamplesPerTrigger(Tango::Attribute &attr);
/**
 *	Write ChannelSamplesPerTrigger attribute values to hardware.
 */
	virtual void write_ChannelSamplesPerTrigger(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for NumOfDisplayableTriggers acquisition result.
 */
	virtual void read_NumOfDisplayableTriggers(Tango::Attribute &attr);
/**
 *	Write NumOfDisplayableTriggers attribute values to hardware.
 */
	virtual void write_NumOfDisplayableTriggers(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for NumOfTriggers acquisition result.
 */
	virtual void read_NumOfTriggers(Tango::Attribute &attr);
/**
 *	Write NumOfTriggers attribute values to hardware.
 */
	virtual void write_NumOfTriggers(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for MaxRefSource acquisition result.
 */
	virtual void read_MaxRefSource(Tango::Attribute &attr);
/**
 *	Write MaxRefSource attribute values to hardware.
 */
	virtual void write_MaxRefSource(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for MinRefSource acquisition result.
 */
	virtual void read_MinRefSource(Tango::Attribute &attr);
/**
 *	Write MinRefSource attribute values to hardware.
 */
	virtual void write_MinRefSource(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for TriggerHighLimit acquisition result.
 */
	virtual void read_TriggerHighLimit(Tango::Attribute &attr);
/**
 *	Write TriggerHighLimit attribute values to hardware.
 */
	virtual void write_TriggerHighLimit(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for TriggerLowLimit acquisition result.
 */
	virtual void read_TriggerLowLimit(Tango::Attribute &attr);
/**
 *	Write TriggerLowLimit attribute values to hardware.
 */
	virtual void write_TriggerLowLimit(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for TriggerSources acquisition result.
 */
	virtual void read_TriggerSources(Tango::Attribute &attr);
/**
 *	Write TriggerSources attribute values to hardware.
 */
	virtual void write_TriggerSources(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for TriggerMode acquisition result.
 */
	virtual void read_TriggerMode(Tango::Attribute &attr);
/**
 *	Write TriggerMode attribute values to hardware.
 */
	virtual void write_TriggerMode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for TriggerInfinite acquisition result.
 */
	virtual void read_TriggerInfinite(Tango::Attribute &attr);
/**
 *	Write TriggerInfinite attribute values to hardware.
 */
	virtual void write_TriggerInfinite(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for BufferPeriod acquisition result.
 */
	virtual void read_BufferPeriod(Tango::Attribute &attr);
/**
 *	Write BufferPeriod attribute values to hardware.
 */
	virtual void write_BufferPeriod(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for BufferedChannelsList acquisition result.
 */
	virtual void read_BufferedChannelsList(Tango::Attribute &attr);
/**
 *	Write BufferedChannelsList attribute values to hardware.
 */
	virtual void write_BufferedChannelsList(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for RawDATA acquisition result.
 */
	virtual void read_RawDATA(Tango::Attribute &attr);
/**
 *	Write RawDATA attribute values to hardware.
 */
	virtual void write_RawDATA(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for DoubleDATA acquisition result.
 */
	virtual void read_DoubleDATA(Tango::Attribute &attr);
/**
 *	Write DoubleDATA attribute values to hardware.
 */
	virtual void write_DoubleDATA(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for FileName acquisition result.
 */
	virtual void read_FileName(Tango::Attribute &attr);
/**
 *	Write FileName attribute values to hardware.
 */
	virtual void write_FileName(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for ScalarStatistic acquisition result.
 */
	virtual void read_ScalarStatistic(Tango::Attribute &attr, Stats::SelectedOperation operation, int channelNum);
/**
 *	Extract real attribute values for SpectrumStatistic acquisition result.
 */
	virtual void read_SpectrumStatistic(Tango::Attribute &attr, Stats::SelectedOperation operation, int channelNum);
/**
 *	Extract real attribute values for ScalarValue acquisition result.
 */
	virtual void read_ScalarValue(Tango::Attribute &attr, int channel);
/**
 *	Write ScalarValue attribute values to hardware.
 */
	virtual void write_ScalarValue(Tango::WAttribute &attr, int channel);
/**
 *	Extract real attribute values for ChannelSpectrum acquisition result.
 */
	virtual void read_ChannelSpectrum(Tango::Attribute &attr, int channel);
/**
 *	Write ChannelSpectrum attribute values to hardware.
 */
	virtual void write_ChannelSpectrum(Tango::WAttribute &attr, int channel);
/**
 *	Read/Write allowed for Delay attribute.
 */
	virtual bool is_Delay_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for DelaySource attribute.
 */
	virtual bool is_DelaySource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SampleRate attribute.
 */
	virtual bool is_SampleRate_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ChannelSamplesPerTrigger attribute.
 */
	virtual bool is_ChannelSamplesPerTrigger_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for NumOfDisplayableTriggers attribute.
 */
	virtual bool is_NumOfDisplayableTriggers_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for NumOfTriggers attribute.
 */
	virtual bool is_NumOfTriggers_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MaxRefSource attribute.
 */
	virtual bool is_MaxRefSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MinRefSource attribute.
 */
	virtual bool is_MinRefSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerHighLimit attribute.
 */
	virtual bool is_TriggerHighLimit_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerLowLimit attribute.
 */
	virtual bool is_TriggerLowLimit_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerSources attribute.
 */
	virtual bool is_TriggerSources_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerMode attribute.
 */
	virtual bool is_TriggerMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for TriggerInfinite attribute.
 */
	virtual bool is_TriggerInfinite_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for BufferPeriod attribute.
 */
	virtual bool is_BufferPeriod_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for BufferedChannelsList attribute.
 */
	virtual bool is_BufferedChannelsList_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for RawDATA attribute.
 */
	virtual bool is_RawDATA_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for DoubleDATA attribute.
 */
	virtual bool is_DoubleDATA_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for FileName attribute.
 */
	virtual bool is_FileName_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ScalarStatistic attribute.
 */
	virtual bool is_ScalarStatistic_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SpectrumStatistic attribute.
 */
	virtual bool is_SpectrumStatistic_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ScalarValue attribute.
 */
	virtual bool is_ScalarValue_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ChannelSpectrum attribute.
 */
	virtual bool is_ChannelSpectrum_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for CalibrationAuto command.
 */
	virtual bool is_CalibrationAuto_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for CalibrationSave command.
 */
	virtual bool is_CalibrationSave_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for CalibrationLoad command.
 */
	virtual bool is_CalibrationLoad_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ImportFile command.
 */
	virtual bool is_ImportFile_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ExportFile command.
 */
	virtual bool is_ExportFile_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ExportFile command.
 */
	virtual bool is_GetData_allowed(const CORBA::Any &any);
/**
 * This Command will start the acquisition and will change the State to RUNNING.<br>
 *	It will register the hardware device if the previous state was STANDBY <br>
 *	The change from RUNNING State to ON is performed inside the always_executed_hook method. <br>
 *	If the device server is in state ON the acquisition is restarted w/out reconfiguring the device.<br>
 *	@exception DevFailed
 */
	void	start();
/**
 * It Stops all the acquisition process, unregisters the Hardware device and sets the State to STANDBY. <br>
 *	It's the only way to unblock the device from FAULT State to STANDBY.
 *	@exception DevFailed
 */
	void	stop();
/**
 * Runs the auto calibration function of the board(if available).
 *  ACHTUNG: It needs exclusive access to the board, so it will kill
 *  any other device running in this device server.
 *	@exception DevFailed
 */
	void	calibration_auto();
	void	calibration_save(Tango::DevULong bank);
	void	calibration_load(Tango::DevULong bank);
	Tango::DevVarDoubleArray *get_data(const Tango::DevVarLongStringArray* argin);

/**
 * It imports inside the rawData buffer the contents of the file designed by FileName Attribute
 *	@return	Ok
 *	@exception DevFailed
 */
	Tango::DevBoolean	import_file();
/**
 * It exports the full rawData buffer buffer contents to a file designed by FileName Attribute
 *	@return	Ok
 *	@exception DevFailed
 */
	Tango::DevBoolean	export_file();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------

	/// This is an auxiliar set to implement the auto-start property until
	/// we get some better support from Tango. See MemAttrWriteCheck.cpp,
	/// that's where it's used.
	std::set<std::string> m_expectedMemorizedAttrs;

	StatsSettings m_statsSettings; /// @todo move protected... ?

protected :	
	//	Add your own data members here
	//-----------------------------------------
	
	long unsigned m_trigger_count;
	long unsigned m_count_data_ready;

	
	/// Value set depending on if the class_name is "AdlinkAI" or "AdlinkAO"
	//  Input/Output Direction of the Channels to be managed,defined in this context:
	/// <ul>
	///   <li>1. Each Tango Device will manage all the Channels of a same Type/Direction of a DAQ Card.</li>
	///   <li>2. The same card cannot be accessed by two Analog Input devices at the same time; and two different devices (1 AI + 1 AO) will be needed to manage a Multi-Purpose Card with Channels of both types.</li>
	/// </ul>
	/// -> The Read/Write permissions of the DoubleDATA, RawDATA, *ChannelValues and *LastValue Attributes will be determined by the value of this Property<br/>
	///
	/// The value will be 1 for input, and 0 for output
	bool	m_isInput;


	struct StatusObserver : BaseBehaviour::StatusObserver
	{
		AdlinkAIO* adlDev;
		virtual void on_change_status(const std::string & st)
		{	adlDev->lets_change_status(st);	}
	};
	StatusObserver m_statusObserver;

	std::string triggerSourceString;

	AdlDeviceFactorySingleton::AdlBoardParams m_boardParams;

	BaseBehaviour* adl;

	void lets_change_status(const std::string & st);
	inline void lets_change_state(bool fromStatus=false);

	void update_sample_rate();

	void signal_handler(long int);

	/// @name Buffered channels list related
	/// @{
		size_t m_bclTotal;
		char** m_bclList;
		void build_buffered_channels_list();
		void destroy_buffered_channels_list();
	/// @}

	/// @name Fire Change Events related
	/// @{
		friend class ::ChangeEventListener;
		ChangeEventListenerInterface *m_changeEventListener;

		void on_data_changed();
		void push_change_events();
	/// @}


	/// @name Useless virtuals to keep abstract class happy...
	/// @{
		virtual void read_ScalarValue(Tango::Attribute &attr)
		{ read_ScalarValue(attr, -1); }
		virtual void write_ScalarValue(Tango::WAttribute &attr)
		{ write_ScalarValue(attr, -1); }
		virtual void read_ChannelSpectrum(Tango::Attribute &attr)
		{ read_ChannelSpectrum(attr, -1); }
		virtual void write_ChannelSpectrum(Tango::WAttribute &attr)
		{ write_ChannelSpectrum(attr, -1); }
	/// @}
};

}	// namespace_ns

#endif	// _ADLINKIODS_H
