//=============================================================================
//
// file :        AdlinkDIO.h
//
// description : Include for the AdlinkDIO class.
//
// project :	DIO for Adlink D2K library based boards
//
// $Author: rsune $
//
// $Revision: 7394 $
//
// $Log$
// Revision 1.1  2007/08/09 11:03:35  rsune
// Initial import: Device for digital input ports for Adlink acquisition boards
//
//
// copyleft :   CELLS/ALBA
//		Edifici Ciences Nord
//		Campus Universitari de Bellaterra
//		Universitat Autonoma de Barcelona
//		08193 Bellaterra, Barcelona, SPAIN
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//=============================================================================
#ifndef _ADLINKD2KDIO_H
#define _ADLINKD2KDIO_H

#include <tango.h>
#include <DIO.h>
#include <PortManager.h>
#include <d2kdask.h>
//using namespace Tango;

/**
 * @author	$Author: rsune $
 * @version	$Revision: 7394 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------

namespace AdlDeviceFactorySingleton_ {
struct AdlBoardParams;
};
class DevicePartInterface;

namespace AdlinkDIO_ns
{

/**
 * Class Description:
 * Offers a DIO abstract based view of the digital input and output ports present in Adlink analogic acquisition boards.
 */

/*
 *	Device States Description:
*  Tango::ON :     *
*  Tango::FAULT :
 */


class AdlinkDIO: public DIO_ns::DIO	//	Inherited from class Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------

	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevString	*attr_BoardPorts_read;
		Tango::DevBoolean	*attr_PortTemplateBOOLEAN_read;
		Tango::DevBoolean	attr_PortTemplateBOOLEAN_write;
		Tango::DevUShort	*attr_PortTemplateUSHORT_read;
		Tango::DevUShort	attr_PortTemplateUSHORT_write;
		Tango::DevLong	*attr_PortTemplateLONG_read;
		Tango::DevLong	attr_PortTemplateLONG_write;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	A device-type-specific identifyier to choose one device on its family.
 */
	string	boardID;
/**
 *	
 */
	string	boardType;
/**
 *	From the ports defined in each concrete device documentation
 *	(you can also see them in the attribute BoardPorts), which are
 *	to be used as Input ports.
 */
	vector<string>	inputPorts;
/**
 *	From the ports defined in each concrete device documentation
 *	(you can also see them in the attribute BoardPorts), which are
 *	to be used as output ports.
 */
	vector<string>	outputPorts;
/**
 *	Define extra names for ports or lines of the device.
 *	These alias will be addes as new attributes to the device.
 *	SYNTAX:
 *	
 *	\#comments
 *	ALIAS PORT p1 p2
 *	
 *	where PORT is a port as in BoardPorts, previously defined as input
 *	or output port in InputPorts or OutputPorts. PORT can also be a previously
 *	defined alias
 *	
 *	p1 and p2 are optional numbers:
 *	- no p1/p2: ALIAS is equal to the whole old PORT
 *	- no p2: ALIAS maps only the bit p1 of PORT
 *	- both: ALIAS is a synonim for the range [p1-p2] of the old PORT
 */
	vector<string>	portAliases;
/**
 *	Set the initial values of the output ports when the device
 *	is started.
 *	Syntax:
 *	PORTALIAS value
 *	
 *	Where PORTALIAS is a device port defined as output or an alias to part of a device port defined as output
 *	On device init, outputs are set in the same order as defined here. You
 *	can assume nothing about output values not defined.
 */
	vector<string>	defaultOutput;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AdlinkDIO(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AdlinkDIO(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	AdlinkDIO(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~AdlinkDIO() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name AdlinkDIO methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for BoardPorts acquisition result.
 */
	virtual void read_BoardPorts(Tango::Attribute &attr);
/**
 *	Extract real attribute values for PortTemplateBOOLEAN acquisition result.
 */
	virtual void read_PortTemplateBOOLEAN(Tango::Attribute &attr);
/**
 *	Write PortTemplateBOOLEAN attribute values to hardware.
 */
	virtual void write_PortTemplateBOOLEAN(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PortTemplateUSHORT acquisition result.
 */
	virtual void read_PortTemplateUSHORT(Tango::Attribute &attr);
/**
 *	Write PortTemplateUSHORT attribute values to hardware.
 */
	virtual void write_PortTemplateUSHORT(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PortTemplateLONG acquisition result.
 */
	virtual void read_PortTemplateLONG(Tango::Attribute &attr);
/**
 *	Write PortTemplateLONG attribute values to hardware.
 */
	virtual void write_PortTemplateLONG(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for BoardPorts attribute.
 */
	virtual bool is_BoardPorts_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PortTemplateBOOLEAN attribute.
 */
	virtual bool is_PortTemplateBOOLEAN_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PortTemplateUSHORT attribute.
 */
	virtual bool is_PortTemplateUSHORT_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PortTemplateLONG attribute.
 */
	virtual bool is_PortTemplateLONG_allowed(Tango::AttReqType type);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	
	virtual bool configure_ports(
			const StringSet& inputs,
			const StringSet& outputs);

	virtual unsigned int read_port(unsigned int portID);
	virtual void write_port(unsigned int portID, unsigned int value,
				unsigned int mask);
	virtual void write_port_initial_output_value(
				unsigned int portID,
				unsigned int value,
				unsigned int mask);

protected :	
	//	Add your own data members here
	//-----------------------------------------
	I16			m_card;
	int			m_cardNumber;
	PortManager m_portFactory;
	std::map<unsigned int, unsigned int> m_lastValue;
	std::map<unsigned int, bool> m_isOutputPort;
	const AdlDeviceFactorySingleton_::AdlBoardParams* m_boardParams;
	DevicePartInterface* m_device;

	bool m_isD2k;
	bool m_realPort0isDIandDO;

	bool is_d2k() const { return this->m_isD2k; }

};

}	// namespace_ns

#endif	// _ADLINKD2KDIO_H
