//=============================================================================
//
// file :         AdlinkDIOClass.h
//
// description :  Include for the AdlinkDIOClass root class.
//                This class is represents the singleton class for
//                the AdlinkDIO device class.
//                It contains all properties and methods which the 
//                AdlinkDIO requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: rsune $
//
// $Revision: 2935 $
//
// $Log$
// Revision 1.1  2007/08/09 11:03:35  rsune
// Initial import: Device for digital input ports for Adlink acquisition boards
//
//
// copyleft :   CELLS/ALBA
//		Edifici Ciences Nord
//		Campus Universitari de Bellaterra
//		Universitat Autonoma de Barcelona
//		08193 Bellaterra, Barcelona, SPAIN
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//=============================================================================

#ifndef _ADLINKD2KDIOCLASS_H
#define _ADLINKD2KDIOCLASS_H

#include <tango.h>
#include <AdlinkDIO.h>


namespace AdlinkDIO_ns
{//=====================================
//	Define classes for attributes
//=====================================
class PortTemplateLONGAttrib: public Tango::Attr
{
public:
        PortTemplateLONGAttrib(
                        const char *name = "PortTemplateLONG",
                        long data_type = Tango::DEV_LONG,
                        Tango::AttrWriteType w_type = Tango::READ_WRITE):
                                Attr(name, data_type, w_type) {};
	~PortTemplateLONGAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkDIO *>(dev))->read_PortTemplateLONG(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkDIO *>(dev))->write_PortTemplateLONG(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkDIO *>(dev))->is_PortTemplateLONG_allowed(ty);}
};

class PortTemplateUSHORTAttrib: public Tango::Attr
{
public:
        PortTemplateUSHORTAttrib(
                        const char *name = "PortTemplateUSHORT",
                        long data_type = Tango::DEV_USHORT,
                        Tango::AttrWriteType w_type = Tango::READ_WRITE):
                                Attr(name, data_type, w_type) {};
	~PortTemplateUSHORTAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkDIO *>(dev))->read_PortTemplateUSHORT(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkDIO *>(dev))->write_PortTemplateUSHORT(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkDIO *>(dev))->is_PortTemplateUSHORT_allowed(ty);}
};

class PortTemplateBOOLEANAttrib: public Tango::Attr
{
public:
        PortTemplateBOOLEANAttrib(
                        const char *name = "PortTemplateBOOLEAN",
                        long data_type = Tango::DEV_BOOLEAN,
                        Tango::AttrWriteType w_type = Tango::READ_WRITE):
                                Attr(name, data_type, w_type) {};
	~PortTemplateBOOLEANAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkDIO *>(dev))->read_PortTemplateBOOLEAN(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AdlinkDIO *>(dev))->write_PortTemplateBOOLEAN(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkDIO *>(dev))->is_PortTemplateBOOLEAN_allowed(ty);}
};

class BoardPortsAttrib: public Tango::SpectrumAttr
{
public:
        BoardPortsAttrib(
                        const char *name = "BoardPorts",
                        long data_type = Tango::DEV_STRING,
                        Tango::AttrWriteType w_type = Tango::READ):
                                SpectrumAttr(name, data_type, w_type, 20) {};
	~BoardPortsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AdlinkDIO *>(dev))->read_BoardPorts(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AdlinkDIO *>(dev))->is_BoardPorts_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The AdlinkDIOClass singleton definition
//

class AdlinkDIOClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AdlinkDIOClass *init(const char *);
	static AdlinkDIOClass *instance();
	~AdlinkDIOClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AdlinkDIOClass(string &);
	static AdlinkDIOClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace AdlinkDIO_ns

#endif // _ADLINKD2KDIOCLASS_H
