static const char *RcsId     = "$Header$";
static const char *TagName   = "$Name$";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        AdlinkDIOClass.cpp
//
// description : C++ source for the AdlinkDIOClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the AdlinkDIO once per process.
//
// project :     TANGO Device Server
//
// $Author: rsune $
//
// $Revision: 7394 $
//
// $Log$
// Revision 1.1  2007/08/09 11:03:35  rsune
// Initial import: Device for digital input ports for Adlink acquisition boards
//
//
// copyleft :   CELLS/ALBA
//		Edifici Ciences Nord
//		Campus Universitari de Bellaterra
//		Universitat Autonoma de Barcelona
//		08193 Bellaterra, Barcelona, SPAIN
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//=============================================================================


#include <tango.h>

#include <AdlinkDIO.h>
#include <AdlinkDIOClass.h>


//+----------------------------------------------------------------------------
/**
 *	Create AdlinkDIOClass singleton and return it in a C function for Python usage
 */
//+----------------------------------------------------------------------------
extern "C" {
#ifdef WIN32

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_AdlinkDIO_class(const char *name) {
		return AdlinkDIO_ns::AdlinkDIOClass::init(name);
	}
}


namespace AdlinkDIO_ns
{


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
AdlinkDIOClass *AdlinkDIOClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::AdlinkDIOClass(string &s)
// 
// description : 	constructor for the AdlinkDIOClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
AdlinkDIOClass::AdlinkDIOClass(string &s):DeviceClass(s)
{

	cout2 << "Entering AdlinkDIOClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();
	
	cout2 << "Leaving AdlinkDIOClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::~AdlinkDIOClass()
// 
// description : 	destructor for the AdlinkDIOClass
//
//-----------------------------------------------------------------------------
AdlinkDIOClass::~AdlinkDIOClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
AdlinkDIOClass *AdlinkDIOClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new AdlinkDIOClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

AdlinkDIOClass *AdlinkDIOClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void AdlinkDIOClass::command_factory()
{

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum AdlinkDIOClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum AdlinkDIOClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum AdlinkDIOClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void AdlinkDIOClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new AdlinkDIO(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: AdlinkDIOClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void AdlinkDIOClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : BoardPorts
	BoardPortsAttrib	*board_ports = new BoardPortsAttrib();
	Tango::UserDefaultAttrProp	board_ports_prop;
	board_ports_prop.set_description("Shows name and properties of the ports the board allows to use.\nUseful to see before filling the properties InputPorts OutputPorts and PortAliases");
	board_ports->set_default_properties(board_ports_prop);
	att_list.push_back(board_ports);

	//	Attribute : PortTemplateBOOLEAN
	PortTemplateBOOLEANAttrib	*port_template_boolean = new PortTemplateBOOLEANAttrib();
	Tango::UserDefaultAttrProp	port_template_boolean_prop;
	port_template_boolean_prop.set_description("Internal use, will be the template for single bit alias.");
	port_template_boolean->set_default_properties(port_template_boolean_prop);
	att_list.push_back(port_template_boolean);

	//	Attribute : PortTemplateUSHORT
	PortTemplateUSHORTAttrib	*port_template_ushort = new PortTemplateUSHORTAttrib();
	Tango::UserDefaultAttrProp	port_template_ushort_prop;
	port_template_ushort_prop.set_description("Internal use only");
	port_template_ushort->set_default_properties(port_template_ushort_prop);
	att_list.push_back(port_template_ushort);

	//	Attribute : PortTemplateLONG
	PortTemplateLONGAttrib	*port_template_long = new PortTemplateLONGAttrib();
	Tango::UserDefaultAttrProp	port_template_long_prop;
	port_template_long_prop.set_description("Internal use only");
	port_template_long->set_default_properties(port_template_long_prop);
	att_list.push_back(port_template_long);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void AdlinkDIOClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	AdlinkDIOClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void AdlinkDIOClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "BoardID";
	prop_desc = "A device-type-specific identifyier to choose one device on its family.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "BoardType";
	prop_desc = "";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "InputPorts";
	prop_desc = "From the ports defined in each concrete device documentation\n(you can also see them in the attribute BoardPorts), which are\nto be used as Input ports.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "OutputPorts";
	prop_desc = "From the ports defined in each concrete device documentation\n(you can also see them in the attribute BoardPorts), which are\nto be used as output ports.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "PortAliases";
	prop_desc = "Define extra names for ports or lines of the device.\nThese alias will be addes as new attributes to the device.\nSYNTAX:\n\n#comments\nALIAS PORT p1 p2\n\nwhere PORT is a port as in BoardPorts, previously defined as input\nor output port in InputPorts or OutputPorts. PORT can also be a previously\ndefined alias\n\np1 and p2 are optional numbers:\n- no p1/p2: ALIAS is equal to the whole old PORT\n- no p2: ALIAS maps only the bit p1 of PORT\n- both: ALIAS is a synonim for the range [p1-p2] of the old PORT";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "DefaultOutput";
	prop_desc = "Set the initial values of the output ports when the device\nis started.\nSyntax:\nPORTALIAS value\n\nWhere PORTALIAS is a device port defined as output or an alias to part of a device port defined as output\nOn device init, outputs are set in the same order as defined here. You\ncan assume nothing about output values not defined.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		AdlinkDIOClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void AdlinkDIOClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("DIO for Adlink D2K library based boards");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Offers a DIO abstract based view of the digital input and output ports present in Adlink analogic acquisition boards.");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("DIO");
	inheritance.push_back("Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
